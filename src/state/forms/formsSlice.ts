import {
  createAsyncThunk,
  createSlice,
  PayloadAction,
  current,
} from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store";
import { Form, Field, Language } from "./types";
import { STATUS } from "../../helpers/constants";

export interface FormState {
  form: Form;
}
const initialState: FormState = {
  form: {
    name: "form",
    status: "idle",
    fields: [],
    options: {
      languages: ["castellano"],
    },
  },
};

export const formsSlice = createSlice({
  name: "forms",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addField: (state, action: PayloadAction<Field>) => {
      state.form.fields.push(action.payload);
    },
    updateField: (state, action: PayloadAction<Field>) => {
      state.form.fields = state.form.fields.map((f: Field) =>
        f.id === action.payload.id ? action.payload : f
      );
    },
    addLanguage: (state, action: PayloadAction<string>) => {
      state.form.options.languages.push(action.payload as Language);
      state.form.fields = state.form.fields.map((f: Field) => ({
        ...f,
        texts: f.texts.concat({
          id: action.payload,
          label: "",
          placeholder: "",
        }),
      }));
    },
    removeLanguage: (state, action: PayloadAction<string>) => {
      state.form.options.languages = state.form.options.languages.filter(
        (l) => l !== action.payload
      );
      state.form.fields = state.form.fields.map((f: Field) => ({
        ...f,
        texts: f.texts.filter((t) => t.id !== action.payload),
      }));
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const { addField, updateField, removeLanguage, addLanguage } =
  formsSlice.actions;

export const selectForms = (state: RootState) => state.forms;

export default formsSlice.reducer;
